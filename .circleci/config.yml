version: 2
aliases:
  - run: &install_deps_gcc
      name: Install dependencies
      command: apt-get update && apt-get install -y git cmake g++ libssl-dev lcov curl #default-jdk maven
  - run: &install_deps_clang
      name: Install dependencies
      command: apt-get update && apt-get install -y git cmake clang libc++-dev libc++abi-dev libssl-dev lcov curl #default-jdk maven
  - run: &print_versions_gcc
      name: Print versions
      command: g++ -v && cmake -version && openssl version #&& java --version
  - run: &print_versions_clang
      name: Print versions
      command: clang --version && cmake -version && openssl version #&& java --version
  - run: &init_submodules
      name: Initialize submodules
      command: git submodule update --init
  - run: &build
      name: Build
      command: cmake --build .
      working_directory: build
  - run: &unittests
      name: Unit tests
      command: mkdir results && ./cpp/tests/unit/unittests -r junit -o results/unittests.xml
      working_directory: build
  - run: &asiotests
      name: ASIO tests
      command: ./cpp/tests/asiotests/asiotests -r junit -o results/asiotests.xml
      working_directory: build
  - run: &integrationtests
      name: Integration tests
      command: ./cpp/tests/integration/integrationtests -r junit -o results/integrationtests.xml
      working_directory: build
  - store_artifacts: &store_test_results
      path: build/results
  - run: &coverage
      name: Code coverage
      command: cmake --build . --target coverage && bash <(curl -s https://codecov.io/bash) -f coverage.info.cleaned
      working_directory: build
  - run: &build_java
      # I was not able to set java.library.path to the build directory, so we just
      # install the target to a system directory.
      name: Prepare Java bindings
      command: cmake -DCMAKE_INSTALL_PREFIX="/usr" . && cmake --build . --target install
      working_directory: build
  - run: &test_java
      # The javadocs fails for some obscure reasons, but it looks like a bug
      # from upstream, not us.
      name: Test Java bindings
      command: mvn verify -Dmaven.javadoc.skip=true
      working_directory: java
  - run: &package
      name: Package
      command: cpack -G ZIP -D CPACK_PACKAGE_FILE_NAME="opendnp3"
      working_directory: build
  - store_artifacts: &store_artifacts
      path: build/opendnp3.zip
jobs:
  build-gcc-debug:
    docker:
      - image: ubuntu:19.04
    steps:
      - checkout
      - run: *install_deps_gcc
      - run: *print_versions_gcc
      #- run: *init_submodules
      - run:
          name: Configure
          command: cmake -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS="-Wall -Werror -Wno-format-truncation" -DDNP3_TLS=ON -DDNP3_TESTS=ON -DDNP3_EXAMPLES=ON -DDNP3_COVERAGE=ON ..
          working_directory: build
      - run: *build
      - run: *unittests
      - run: *asiotests
      - run: *integrationtests
      - run: *coverage
      - store_test_results: *store_test_results
      #- run: *build_java
      #- run: *test_java
      #- run: *package
      #- store_artifacts: *store_artifacts
  build-gcc-release:
    docker:
      - image: ubuntu:19.04
    steps:
      - checkout
      - run: *install_deps_gcc
      - run: *print_versions_gcc
      #- run: *init_submodules
      - run:
          name: Configure
          command: cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_FLAGS="-Wall -Werror -Wno-format-truncation" -DDNP3_TLS=ON -DDNP3_TESTS=ON -DDNP3_EXAMPLES=ON ..
          working_directory: build
      - run: *build
      - run: *unittests
      - run: *asiotests
      - run: *integrationtests
      - store_test_results: *store_test_results
      #- run: *build_java
      #- run: *test_java
      #- run: *package
      #- store_artifacts: *store_artifacts
  build-clang-debug:
    docker:
      - image: ubuntu:19.04
    steps:
      - checkout
      - run: *install_deps_clang
      - run: *print_versions_clang
      #- run: *init_submodules
      - run:
          name: Configure
          command: cmake -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS="-Wall -Werror" -DDNP3_TLS=ON -DDNP3_TESTS=ON -DDNP3_EXAMPLES=ON ..
          working_directory: build
      - run: *build
      - run: *unittests
      - run: *asiotests
      - run: *integrationtests
      - store_test_results: *store_test_results
      #- run: *build_java
      #- run: *test_java
      #- run: *package
      #- store_artifacts: *store_artifacts
  build-clang-release:
    docker:
      - image: ubuntu:19.04
    steps:
      - checkout
      - run: *install_deps_clang
      - run: *print_versions_clang
      #- run: *init_submodules
      - run:
          name: Configure
          command: cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_FLAGS="-Wall -Werror" -DDNP3_TLS=ON -DDNP3_TESTS=ON -DDNP3_EXAMPLES=ON ..
          working_directory: build
      - run: *build
      - run: *unittests
      - run: *asiotests
      - run: *integrationtests
      - store_test_results: *store_test_results
      #- run: *build_java
      #- run: *test_java
      #- run: *package
      #- store_artifacts: *store_artifacts
workflows:
  version: 2
  build_and_test:
    jobs:
      - build-gcc-debug
      - build-gcc-release
      - build-clang-debug
      - build-clang-release
